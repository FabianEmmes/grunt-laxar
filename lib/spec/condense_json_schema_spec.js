/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */

/* global expect */
require( 'expectations' );

var jjv = require( 'jjv' );
var meta_schema = require( './meta_json_schema_draft-04.json' );
var condenseJsonSchema = require( '../condense_json_schema' );

describe( 'CondenseJsonSchema', function() {
   'use strict';

   var SCHEMA_URL = 'http://json-schema.org/draft-04/schema#';

   var meta_env = jjv();
   meta_env.addSchema( 'schema', meta_schema );

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   /*
    * Checks, that a schema can be condensed to a valid schema. For every element in `testCases` check that
    * it validates with the original schema and the condensed schema and that the result of
    * default-instantiating it with the original schema and the condensed schema are the same.
    */
   function checkSchema( schema, testCases ) {
      var errors;

      errors = meta_env.validate( 'schema', schema );
      expect( errors ).toBeFalsy( 'Broken test case, invalid input schema:\n'
            + JSON.stringify( errors, null, 3 ) );
      var condensed_schema = condenseJsonSchema( schema );

      errors = meta_env.validate( 'schema', condensed_schema );
      expect( errors ).toBeFalsy( 'Condensed schema invalid:\n' + JSON.stringify( errors, null, 3 ) );

      var env = jjv();
      env.addSchema( 'original', schema );
      env.addSchema( 'condensed', condensed_schema );

      testCases.forEach( function( data ) {
         var d_orig = JSON.parse( JSON.stringify( data ) );
         var d_condensed = JSON.parse( JSON.stringify( data ) );
         errors = env.validate( 'original', d_orig, { useDefault: true } );
         expect( errors ).toBeFalsy( 'Broken test case, data does not ' +
               'validate:\n' + JSON.stringify( errors, null, 3 ) );
         errors = env.validate( 'condensed', d_condensed, { useDefault: true } );
         expect( errors ).toBeFalsy( 'Condensed schema does not validate data:\n'
               + JSON.stringify( errors, null, 3 ) );

         expect( d_condensed ).toEqual( d_orig, 'Default values generated by original schema do not match '
               + 'default values generated by condensed schema.' );
      });
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   it( 'condenses a simple object schema correctly', function() {
      var schema = {
         '$schema': SCHEMA_URL,
         'type': 'object',
         'properties': {
            'foo': {
               'type': 'integer',
               'default': 2
            },
            'bar': {
               'type': 'array',
               'default': [],
               'items': [{'type': 'integer'}, {'type': 'string'}]
            },
            'no_default': {
               'type': 'integer'
            }
         }
      };

      var testCases = [
         {},
         {'foo': 2, 'additional': 3},
         {'bar': [2, 'foo', {}], 'no_default': 2}
      ];

      checkSchema( schema, testCases );
   } );

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   it( 'condenses a simple array schema correctly', function() {
      var schema = {
         '$schema': SCHEMA_URL,
         'type': 'array',
         'items': [
            {
               'type': 'integer',
               'default': 2
            },
            {
               'type': 'array',
               'default': [],
               'items': [{'type': 'integer'}, {'type': 'string'}]
            },
            {
               'type': 'object',
               'properties': {
                  'foo': { 'type': 'string', 'default': 'bar' }
               }
            }
         ]
      };

      var testCases = [
         [1, [2, "foo"], {}]
      ];

      checkSchema( schema, testCases );
   } );

} );
